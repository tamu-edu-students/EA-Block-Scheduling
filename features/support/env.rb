# frozen_string_literal: true

require 'simplecov'

SimpleCov.start do
  add_filter '/spec/'  # Exclude spec files
  add_filter '/config/'  # Exclude config files
  add_filter '/app/channels/'  # Exclude channels directory
  add_filter '/app/jobs/'      # Exclude jobs directory
  add_filter '/app/mailers/'   # Exclude mailers directory
  add_filter '/app/models/'    # Exclude models directory
  add_filter 'app/channels/application_cable/channel.rb'  # Exclude specific files
  add_filter 'app/channels/application_cable/connection.rb'
  add_filter 'app/jobs/application_job.rb'
  add_filter 'app/mailers/application_mailer.rb'
  add_filter 'app/models/application_record.rb'
end

# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'cucumber/rails'
require 'capybara/cucumber'
require 'omniauth'
require 'selenium-webdriver'
# frozen_string_literal: true

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :transaction
rescue NameError
  raise 'You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it.'
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { except: [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('not @no-txn', 'not @selenium', 'not @culerity', 'not @celerity', 'not @javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
# features/support/env.rb
Before do
  # Mock the OmniAuth Google OAuth2 response
  OmniAuth.config.test_mode = true
  OmniAuth.config.mock_auth[:google_oauth2] = OmniAuth::AuthHash.new({
    provider: 'google_oauth2',
    uid: '12345',
    role: 'admin',
    info: { email: 'testuser@example.com', name: 'Test User' }
  })
end

After do
  OmniAuth.config.test_mode = false
end

Cucumber::Rails::Database.javascript_strategy = :truncation
# Capybara.register_driver :selenium_chrome do |app|
#   options = Selenium::WebDriver::Chrome::Options.new
#   options.add_argument('--headless') # if you want headless testing
#   options.add_argument('--disable-gpu')
#   options.add_argument('--no-sandbox')
#   Capybara::Selenium::Driver.new(app, browser: :chrome, options: options)
# end
Capybara.javascript_driver = :selenium_chrome
